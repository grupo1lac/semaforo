#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{indentfirst}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language portuguese
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size huge
Controlador de Semáforos
\series default
\size default

\begin_inset Newline newline
\end_inset

Relatório Técnico Final - Laboratório de Aquisição e Controlo
\end_layout

\begin_layout Author
Pedro Sousa (up201704307)
\begin_inset Newline newline
\end_inset

Leonardo Hügens (up201705764)
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
Neste relatório está documentado o processo de criação de um controlador
 de semáforos.
 Para isso, utilizamos o LabView como ferramenta principal, também utilizando
 um pouco de Python na automatização.
\end_layout

\begin_layout Standard
Foi feita a escolha de um local real da cidade do Porto, a respetiva simulação,
 e o desenvolvimento de um algoritmo que, dadas certas informações sobre
 o estado do tráfego em tempo real, decide a configuração de cada um dos
 semáforos que a ela melhor se adequa.
 A aplicação real destes controladores teria como consequência uma melhor
 gestão global do tráfego, nomeadamente a diminuição da duração dos congestionam
entos diários que ocorrem a certas horas em várias zonas de grandes cidades
 como o Porto.
\end_layout

\begin_layout Section
Especificações iniciais
\end_layout

\begin_layout Standard
Em primeiro lugar, começamos por discutir que situação iríamos estudar,
 com foco em situações reais do área metropolitana do Porto.
 Começamos por pensar na interceção da Rua Júlio Dínis com a Praça de Mouzinho
 de Albuquerque pois apresenta uma interação interessante entre o semáforo
 dos peões e os semáforos de entrada e saída da rotunda.
 No entanto, decidimos optar por um cruzamento pois abria possibilidades
 para novas interações.
 O cruzamento em questão é o cruzamento entre a Rua Latino Coelho e a Rua
 Alegria (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:earth"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
Escolhemos o LabView para a implementação do controlador, já que nos dá
 a capacidade de intervir manualmente durante a execução do código, podendo
 assim simular facilmente bastantes estados do tráfego logo na fase inicial
 do desenvolvimento, muito antes de precisarmos realmente de automatizar
 esse processo.
 Desta maneira, será prática a avaliação contínua da performance do controlador.
\end_layout

\begin_layout Standard
Por outro lado, o pacote de interação com um interpretador de Python que
 o LabView tem é um bom apoio na eventualidade de precisarmos de implementar
 algo mais complexo como as funções que farão parte da automatização da
 simulação do controlador.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename earth.png
	lyxscale 10
	width 15cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:earth"

\end_inset

Cruzamento entre a Rua da Alegria e a Rua Latino Coelho, Porto.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Planeamento
\end_layout

\begin_layout Standard
Para este projeto, implementamos um processo de evolução natural de trabalho.
 Isto é, começamos com um programa simples (
\begin_inset Formula $\alpha$
\end_inset

_0.1) e fomos inserindo novas características e funcionalidades.
 Apresentamos agora um breve resumo das várias fases do programa.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.1: Sistema com semáforo principal e semáforo para peões perfeitamente
 sincronizados.
 Apresenta um botão de emergência que, caso esteja ativo, o semáforo para
 peões é desativado e o semáforo principal fica em amarelo intermitente.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.2: Reforma à primeira versão do programa.
 Apresenta as mesmas características do 
\begin_inset Formula $\alpha$
\end_inset

_0.1, porém, de forma mais compacta, assim, quando fossemos estudar sistemas
 mais complexos teríamos uma maneira simples de fazer semáforos usando uma
 subVI de 
\begin_inset Formula $\alpha$
\end_inset

_0.2.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.3: Com o insucesso de 
\begin_inset Formula $\alpha$
\end_inset

_0.2, fazemos a nossa segunda reforma.
 Processo utiliza uma ideia semelhante à versão 0.2 mas agora fizemos um
 semáforo à volta de ''case structures''.
 Apresenta dois semáforos principais, conectados como se fossem dois semáforos
 de um cruzamento, e os respetivos semáforos para peões.
 Apresenta também um mecanismo de acionameto antecipado por controlo de
 velocidade dos veículos e um mecanismo que, caso haja bastante tráfego
 na via, o semáforo utiliza essa informação de forma a haver uma desiguldade
 ''positiva''
\begin_inset Foot
status open

\begin_layout Plain Layout
Com desigualdade ''positiva'' queremos dizer que o semáforo vai estar mais
 tempo no verde
\begin_inset Formula $+$
\end_inset

amarelo do que no vermelho
\end_layout

\end_inset

 entre o tempo em que está em vermelho e o tempo em que está no verde 
\begin_inset Formula $+$
\end_inset

 amarelo, e assim diminuir naturalmente o tráfego.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.4: Mudança de um cruzamento entre vias de sentido único para o cruzamento
 desejado, que tem uma via de dois sentidos e outra de sentido único.
 Os semáforos da via de dois sentidos são naturalmente clones um do outro,
 ou seja, a sua configuração instantênea é sempre semelhante.
 Adicionamos também todo o aspeto visual da própria via no Front Panel do
 LabView.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.5: Automatização da simulação através de um script de python com funções
 que descrevem os rácios de entrada ao longo do tempo e outras que com base
 nos valores destes rácios geram amostras estocásticas da velocidade instânea
 dos carros.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\alpha$
\end_inset

_0.6: Otimização da execução do código Python através da utilização de apenas
 um script que toma como argumento um array todos os valores necessários
 e retorna os pretendidos também num array, em oposição a ter um script
 por valor pretendido.
\end_layout

\begin_layout Section
Desenvolvimento
\end_layout

\begin_layout Standard
Nesta parte do relatório iremos explicar em detalhe as fases do nosso projeto
 sumariadas anteriormente.
\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.1
\end_layout

\begin_layout Standard
Em primeiro lugar, criamos o semáforo principal, para isso utilizamos booleanos
 do tipo botão, alterando a cor para o respetivo elemento do semáforo e
 fizemos uma flat sequence onde por cada frame apenas uma luz estava ligada.
 Depois criamos mais dois botões referentes ao semáforo para peões e alteramos
 a sua condição consoante o estado em que o semáforo principal estava (se
 o semáforo estava vermelho o semáforo para peões ficava verde, (se o semáforo
 estava verde o semáforo para peões ficava vermelho).
 Por fim criamos uma case structure que, caso o botão de emergência estivesse
 ativo corria um ciclo while em que a luz amarela ligava e desligava e caso
 estivesse desligado corria o nosso programa anteriormente escrito.
 Por fim, introduzimos um timer que apresenta ao peão quanto tempo falta
 para o seu semáforo ficar vermelho.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename a01block.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\alpha$
\end_inset

_0.1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.2
\end_layout

\begin_layout Standard
Após termos um propótipo inicial com as funcionalidades básicas (funcionamento
 normal e situação de emergência), decidimos tentar encontrar uma estrutura
 de código que nos permitisse construir um subVI com um semáforo e simplesmente
 clonar essa subVI várias vezes, construindo assim estruturas mais complexas.
 Um bom candidato para essa estrutura seria o ''Event Structure'' do LabView,
 que faz uma ''sandbox'' a uma certa porção de código e só o executa na
 ocorrência de um evento, como por exemplo a alteração do valor de uma variável
 local.
 Deste modo, a ideia era conter todo o código respetivo a um controlador
 dentro de uma destas estruturas e contê-la dentro da tal subVI.
 Depois de fazer esta implementação, ao tentar construir a subVI apercebemo-nos
 que o LabView não suporta conter um ''Event Structure'' dentro da mesma,
 pelo que tivemos que desistir desta ideia.
\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.3
\end_layout

\begin_layout Standard
A ideia inicial era a implementação de um ''state'' que está associado ao
 semáforo, isto é:
\end_layout

\begin_layout Itemize
Se o semáforo está no estado 0, ele está vermelho e passa para o estado
 1 quando se tiver passado no mínimo
\begin_inset Foot
status open

\begin_layout Plain Layout
este ''no mínimo'' é interessante e será discutido mais à frente
\end_layout

\end_inset

 um tempo 
\begin_inset Formula $t=timer$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
timer é um input do nosso sistema de forma a definir o tempo que o semáforo
 fica no verde
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Se o semáforo esá no estado 1 ele começa verde e, passado um tempo 
\begin_inset Formula $t=timer$
\end_inset

, muda para amarelo, onde permanece um tempo 
\begin_inset Formula $t=\frac{timer}{2}$
\end_inset

, por fim, muda para o estado 0.
\end_layout

\begin_layout Standard
Aplicando isto a um semáforo simples o que acontece é exatamente o esperado,
 e apenas tivemos de usar um case structure para definir os estados e uma
 flat sequence para fazer o semáforo ficar verde e depois amarelo.
\end_layout

\begin_layout Standard
Agora, decidimos emparelhar outro semáforo.
 Para isso, estudamos um cruzamento simples entre duas vias de sentido único.
 Neste exemplo, tudo está em sincronia:
\end_layout

\begin_layout Itemize
Quando um semáforo está a permitir passagem (estado 1), o outro não permite
 (estado 0).
\end_layout

\begin_layout Itemize
Quando um semáforo está a permitir passagem (estado 1), o seu semáforo de
 peões associado não permite.
\end_layout

\begin_layout Standard
Para implementar esta ideia fizemos com que os estados dos semáforos estivessem
 conectados.
 Isto é, o semáforo 1 está num estado X, então o semáforo 2 está no outro
 estado.
\end_layout

\begin_layout Standard
Mas, com esta teoria deparamo-nos com um problema conceptual.
 Um semáforo fica no estado 0 um tempo 
\begin_inset Formula $t=timer$
\end_inset

 e fica no estado 1 um tempo 
\begin_inset Formula $t=1.5timer$
\end_inset

 (
\begin_inset Formula $1.0$
\end_inset

 no verde e 
\begin_inset Formula $0.5$
\end_inset

 no amarelo).
 Se os semáforos estão perfeitamente conectados quanto tempo irá o semáforo
 estar no vermelho? A resposta é 
\begin_inset Formula $1.5timer$
\end_inset

 o que é o esperado, porque o estado só muda quando tudo o que tiver de
 acontecer naquela iteração do 
\emph on
for 
\emph default
(que é o nosso 
\emph on
for
\emph default
 temporal) terminar, ou seja, 
\begin_inset Formula $1.5timer$
\end_inset

 depois.
\end_layout

\begin_layout Standard
Para finalizar, adicionamos duas novas ferramentas:
\end_layout

\begin_layout Itemize
Um mecanismo que, caso haja um carro a mais de 
\begin_inset Formula $50Km/h$
\end_inset

, o amarelo é acionado antecipadamente.
 No entanto, o semáforo fica no verde no mínimo um tempo 
\begin_inset Formula $t=\frac{timer}{2}$
\end_inset

.
 Este tempo foi introduzido para quando o semáforo fica verde não mudar
 imediatamente para amarelo, havendo sempre um delay justificado.
\end_layout

\begin_layout Itemize
Um mecanismo que, caso haja um enorme tráfego de carros, o semáforo permaneça
 menos tempo no vermelho de forma a haver um melhor fluído de tráfego.
\end_layout

\begin_layout Standard
Estes dois mecanismos estão ligados pois, no fundo, acionar um aviso de
 congestionamento na via 1 é o equivalente a ligar o mecanismo de velocidade
 na via 2, pois, se na via 2 está menos tempo no verde, por consequência,
 na via 1 está menos tempo no vermelho.
\end_layout

\begin_layout Standard
Adicionamos uns sliders para representarem o tráfego nas vias e fizemos
 com que o seu valor diminuísse quando está verde e amarelo e aumentasse
 quando está vermelho.
 Adicionamos também um input ''rácio de entrada'' que, se saem Y carros
 enquanto está verde, entram ''rácio de entrada'' 
\begin_inset Formula $\times$
\end_inset

Y carros enquanto está vermelho.
 Assim, podemos associar este valor, por exemplo, à altura do dia.
 Se, na hora de ponta entram 
\begin_inset Formula $5\times$
\end_inset

 mais carros do que saem, à noite entram 
\begin_inset Formula $\frac{1}{10}\times$
\end_inset

 dos carros que saem até que não há trânsito de todo.
\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.4
\end_layout

\begin_layout Standard
Nesta implementação decidimos estudar o caso escolhido, ou seja, o cruzamento
 da rua Latino Coelho e da rua da Alegria.
 Para isso, remodelamos o 
\begin_inset Formula $\alpha$
\end_inset

_0.3 de forma a queria uma melhor visualização do cruzamento no Front Panel
 do LabView.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename a04front.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Front Panel do 
\begin_inset Formula $\alpha$
\end_inset

_0.4 com o esquema do cruzamento entre a Rua Latino Coelho e a Rua da Alegria;
 o botão retangular está ativo quando a velocidade na via é 
\begin_inset Formula $\geq50km/h$
\end_inset

; o botão quadrado está ativo quando há congestionamento na via (Valor no
 Slider 
\begin_inset Formula $\geq8$
\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.5
\end_layout

\begin_layout Standard
Decidimos que o projeto estava numa fase suficientemente avançada para implement
armos um simulação automática.
 Mais pormenorizadamente, essa automatização consistiria em assumir uma
 determinada evolução temporal do rácio de entrada, em que o pormenor mais
 importante dessa evolução seria a existência de dois claros máximos ao
 longo dia: às 8h e às 17h.
 Como esse fenómeno ocorre com muita consistência, decidimos que uma evolução
 determinista que consiste numa combinação linear de duas distribuições
 de Cauchy (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cauchy"
plural "false"
caps "false"
noprefix "false"

\end_inset

) com os seus máximos nos anteriormente referidos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cauchy.gif
	width 12cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cauchy"

\end_inset

Distribuição de Cauchy e a respetiva função cumulativa.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como a velocidade instantânea dos veículos é claramente um fenómeno mais
 aleatório, decidimos gerar a cada instante um valor aleatório da mesma,
 seguindo também uma distribuição de Cauchy.
 +++Contudo, não faria muito sentido que o valor médio da distribuição fosse
 uma constante, já que é pouco provável que este seja o mesmo em situações
 de alto ou baixo tráfego.
 Deste modo, fizemos com que o valor médio fosse uma função do rácio de
 entrada, mais especificamente uma sigmóide.
 Esta função é frequentemente utilizadada como função de ativação de redes
 neuronais.
\end_layout

\begin_layout Standard
Segue-se uma breve descrição das funções:
\end_layout

\begin_layout Standard
• “genspeed”: função que gera velocidades instantâneas.
 Recorremos ao módulo random do pacote NumPy, ao método da inversão da função
 cumulativa da distribuição de probabilidade, e ao facto de que a distribuição
 que escolhemos tem uma primitiva facilmente determinável.
\end_layout

\begin_layout Standard
• “cauchy”: retorna o valor da distribuição de probabilidade para um dado
 valor da variável aleatória, do valor médio e do desvio padrão.
\end_layout

\begin_layout Standard
• “gettime”: usa o tempo real e converte-o num tempo virtual, sendo que
 estes diferem apenas de um fator multiplicativo.
\end_layout

\begin_layout Standard
• “ratio”: função que retorna os rácios de entrada dada a altura do dia.
\end_layout

\begin_layout Subsection*
\begin_inset Formula $\boldsymbol{\alpha}$
\end_inset

-0.6
\end_layout

\begin_layout Standard
Percebemos que chamar uma instância do interpretador de python para cada
 um dos valores que queríamos calcular causava problemas de ecidimos juntar
 todas as funções num só script e fazer mais uma função, que recebe como
 argumento todos variáveis consideradas num certo instante, chama as restantes
 funções e retorna todos os resultados noutro array, que é diretamente passado
 para o LabView.
 Desta
\end_layout

\begin_layout Standard
• “get”: recebe o array com os parâmetros controlados no Front Panel, nomeadamen
te o fator de conversão entre os tempos e os valores instantâneos dos rácios
 de entrada, chama as restantes funções e organiza todos os valores num
 array de output que será recebido pela VI.
\end_layout

\begin_layout Standard
O código que diz respeito a todas estas funções está presente na seguinte
 Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:node"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename python.png
	lyxscale 10
	width 10cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:node"

\end_inset

Script de Python.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Avaliação de desempenho
\end_layout

\begin_layout Standard
Resumidamente, o comportamento geral do controlador em siconsiste nas seguintes
 funcionalidades:
\end_layout

\begin_layout Itemize
Controlo do intervalo em que os semáforos permanecem com luz verde/vermelha
 com base no quantidade de veículos da via.
\end_layout

\begin_layout Itemize
A existência de um caso de emergência, no qual todos os semáforos entram
 numa intermitência da luz amarela.
\end_layout

\begin_layout Itemize
A passagem atempada para vermelho do semáforo da via onde um carro estava
 a ultrapassar um certo limite de velocidade, obrigando-o a imobilizar-se.
\end_layout

\begin_layout Standard
Na sua última versão do código, o algoritmo desempenha toda estas funções.
 A única parte da execução que pode não apresentar uma performance consistente
 é a parte da automatização.
 Como a utilização explícita do “Runtime” do LabView não é a mais simples,
 decidimos utilizar o tempo real do sistema onde o código está a correr
 e trabalhar com um tempo “virtual”, sendo que estes diferem por uma constante
 mulptiplicativa.
 Deste modo, há sempre o limite em que o ritmo relativo de passagem do tempo
 virtual é demasiado elevado, maior que o tempo de processamento normal
 do LabView, e podem surgir complicações.
 Deste modo decidimos não sintonizar os tempos durante os quais os semáforos
 estão nas respetivas configurações, já que tornava um pouco difícil a visualiza
ção das várias funcionalidades e podia resultar em mais complicações como
 as mencionadas.
\end_layout

\begin_layout Section
Implementação real - refleções
\end_layout

\begin_layout Standard
Se pensarmos no controlador em si como software, a sua implementação na
 vida real seria em princípio bastante fácil.
 Contudo, o LabView, como se pode entender pelo nome, foi feito para utilização
 com um Display Manager, e apenas para Windows e MacOS.
 A melhor implementação dos controladores seria a utilização do software
 num dispositivo muito acessível e económicos como o Arduino ou o Raspberry
 Pi, que foram feitos para desempenhar um número limitado de processos,
 como seria o caso do nosso controlador.
 Assim, era apenas uma questão de converter o nosso algoritmo para uma linguagem
 mais apropriada como Python, C ou C++.
 Contudo, já que o nosso algoritmo envolve a recolha de informações como
 o número de carros na via e a sua velocidade instantânea, teríamos de adicionar
 um aparelho que recolhesse estes dados.
\end_layout

\begin_layout Section
Conclusão
\end_layout

\begin_layout Standard
Na nossa opinião, a realização deste trabalho suporta a ideia de que é possível
 melhorar o trânsito em grandes cidades, através da implementação de controlador
es com comportamento adaptativo consoante as características do próprio
 trânsito, ainda que a melhoria não seja muito drástica.
 No entanto, temos de ter em conta que apenas testamos este controlador
 neste caso em específico, e é provável que a sua aplicação em configurações
 mais complexas de vias seja bastante mais complicado, não justificando
 a sua aplicação.
 Também é possível que a simulação com que testamos o controlador não se
 aproxime tanto da realidade nessas outras configurações de via, sendo que
 mesmo que as testássemos teríamos que descobrir como as testar devidamente,
 talvez recolhendo e analisando dados reais.
\end_layout

\begin_layout Subsection*
Recursos
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/grupo1lac/semaforo/"
target "https://github.com/grupo1lac/semaforo/"
literal "true"

\end_inset

 - Repositório de GitHub do projeto, contendo todo o código associado à
 evolução do projeto.
\end_layout

\end_body
\end_document
